/**
 * Write a description of class Main here.
 *
 * @author Gustavo Marques ( @GUTODISSE ) 
 * @version 13_03_2019
 */
 
 public final class Checker implements Visitor {
 	
 	// Program
 	public Object visitProgram (Program prog, Object arg)
 	{
 		prog.I.visit(this, null);
 		prog.Cr.visit(this, null);
 		return null;
 	}
 	
 	// Identification
	public Object visitSimpleId(Id_simples com, Object arg)
	{
		System.out.println("Id:" + com.spelling);
		// idTable.enter(com.spelling);
		return null;
	}
	public Object visitCompoundId(Id_seq com, Object arg)
	{
		com.I1.visit(this, null);
		com.I2.visit(this, null);
		
		return null;
	}
 	
 	// Body
	public Object visitCorpo(Corpo com, Object arg)
	{
		com.D.visit(this, null);
		com.C.visit(this, null);
		
		return null;
	}
 	
 	// Declaration
	public Object visitSimpleDeclaration(Declaracao_simples com, Object arg)
	{
		com.I.visit(this, null);
		com.T.visit(this, null);
		
		return null;
	}
	public Object visitCompoundDeclaration(Declaracao_seq com, Object arg)
	{
		com.D1.visit(this, null);
		com.D2.visit(this, null);
		
		return null;
	}
	
	// Term
	public Object visitSimpleTerm(Termo_unico com, Object arg)
	{
		com.F.visit(this, null);
		
		return null;		
	}
	public Object visitCompoundTerm(Termo_composto com, Object arg)
	{
		com.F1.visit(this, null);
		com.F2.visit(this, null);
		
		// TODO:
		// OP_MUL - I DON'T KNOW WHAT TO DO WITH THIS OPERATOR (??)
		
		return null;
	}
	
	// Fator 
	public Object visitFatorVar(Fator_VAR com, Object arg)
	{
		com.V.visit(this, null);
		
		return null;
	}
	public Object visitFatorLit(Fator_LIT com, Object arg)
	{
		System.out.println("Literal:" + com.Lit);
		return null;
	}
	public Object visitFatorExp(Fator_EXP com, Object arg)
	{
		com.Exp.visit(this, null);
		
		return null;
	}
	
	// Variable
	public Object visitSimpleVar(Var_simples com, Object arg)
	{
		com.I.visit();
		com.E.visit();
		
		return null;
	}
	
	// Expressions
	public Object visitSimpleExpression(Expressao_s com, Object arg)
	{
		com.E.visit();
		
		return null;
	}
	public Object visitCompoundExpression(Expressao_composta com, Object arg)
	{
		com.E1.visit();
		com.E2.visit();
		
		// TODO:
		// OP_REL - I DON'T KNOW WHAT TO DO WITH THIS OPERATOR (??)
		
		return null;
	}
	
	// Expression Simple
	public Object visitSimpleExpressionSimple(Expressao_simples_simples com, Object arg)
	{
		com.T.visit();
		
		return null;
	}
	public Object visitCompoundExpressionSimple(Expressao_simples_composta com, Object arg)
	{
		com.T1.visit();
		com.T2.visit();
		
		// TODO:
		// OP_AD - I DON'T KNOW WHAT TO DO WITH THIS OPERATOR (??)
		
		return null;
	}
	
	// Type
	public Object visitSimpleType(Tipo_simples com, Object arg)
	{
		System.out.println("Tipo:" + com.spelling);
		return null;
	}
	
	public Object visitArrayType(Tipo_array com, Object arg)
	{
		com.T1.visit();
		return null; 
	}
	
	
 	// Command
	public Object visitIfCommand(Comando_IF com, Object arg)
	{
		return null;
	}
	
	public Object visitIfElseCommand(Comando_IF_composto com, Object arg)
	{
		return null;
	}
	
	public Object visitIfSequentialCommand(Comando_Seq com, Object arg)
	{
		return null;
	}
	
	public Object visitVarCommand(Comando_VAR com, Object arg)
	{
		return null;
	}
	
	public Object visitWhileCommand(Comando_WHILE com, Object arg)
	{
		return null;
	}
	
 	
 	public void check (Program prog)
 	{
		prog.visit(this,null);
 	}
 }
